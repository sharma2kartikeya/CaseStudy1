#Sys.sleep(2)
}
aggStore<-sqldf("select Store,Date,avg(Weekly_Sales) as Avg_Weekly_Sales from train group by Store,Date ")
aggStore$Date<-as.Date(aggStore$Date)
aggDate<-sqldf("select Date,avg(Weekly_Sales) as Avg_Weekly_Sales  from train group by Date ")
aggDate$Date<-as.Date(aggDate$Date)
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,42)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
View(temp)
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
#Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- auto.arima(demandTrain) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
#Sys.sleep(2)
}
install.packages("RPostgres")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
library(RPostgreSQL)
library(sqldf)
aggStore<-sqldf("select Store,Date,avg(Weekly_Sales) as Avg_Weekly_Sales from train group by Store,Date ")
install.packages("RPostgres")
library(RPostgreSQL)
library(RPostgreSQL)
aggStore<-sqldf("select Store,Date,avg(Weekly_Sales) as Avg_Weekly_Sales from train group by Store,Date ")
View(aggStore)
StoreDetails<-split(aggStore,aggStore$Store)
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,42)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
library(forecast)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,42)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
View(Cumul_MAPE_HW)
View(Cumul_bias_HW)
View(Cumul_TS_HW)
write.csv(Cumul_MAPE_HW, file = "Cumul_MAPE_HW.csv")
write.csv(Cumul_bias_HW, file = "Cumul_bias_HW.csv")
write.csv(Cumul_TS_HW, file = "Cumul_TS_HW.csv")
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,42)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,50)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
Cumul_MAPE_HW[,i]<-error_Meas$MAPE
Cumul_bias_HW[,i]<-error_Meas$bias
Cumul_TS_HW[,i]<-error_Meas$TS
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
dataFreq=  52
startEntry= c(2010,5)
trainSetStart= c(2010,5)
trainSetEnd=  c(2012,7)
testSetStart= c(2012,8)
testSetEnd= c(2012,50)
for (i in 1:45)
{
temp<-StoreDetails[[i]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(1)
demandTrain <- window(demandTS,start=trainSetStart,end=trainSetEnd) #extract training set
demandTest <- window(demandTS,start=testSetStart,end=testSetEnd) #extract test set
# ###########Forecast#########
numForcPeriods=36
#number of periods to forecast in the future (Note: If you are computing errors with respect to testing data then this value
#                     #should be equal to the duration of the testing data)
HWForcModel <- HoltWinters(demandTrain,seasonal=c("multiplicative")) #Train Holt-Winters forecasting model. Can be additive or multiplicative
HWForecast <- forecast(HWForcModel, h=numForcPeriods, model = HoltWinters) #Foreacst using Holt-Winters model trained in previous step
plot(HWForecast, main="Plot of training demand,
testing demand, and forecast with 80% and 95%
prediction intervals",xlab="Week",
ylab="Sales") #plot the training demand, and forecast with prediction intervals
lines(demandTest,col=2) #add the testing demand line to plot
legend("topleft", lty=1, col=c(1,4,2),
legend=c("Training Sales","Forecast","Testing Sales")) #create plot legend
###########Analyze forecasting error#########
error = HWForecast$mean - demandTest #difference between forecast and actual demand
AD=abs(error) #absolute value of error
#Create empty vectors to store errors
MSE <- matrix(, nrow = numForcPeriods, ncol = 1)
MAD <- matrix(, nrow = numForcPeriods, ncol = 1)
MAPE <- matrix(, nrow = numForcPeriods, ncol = 1)
bias <- matrix(, nrow = numForcPeriods, ncol = 1)
TS <- matrix(, nrow = numForcPeriods, ncol = 1)
#Label columns of matrices using name of error
colnames(MSE) <- "MSE"
colnames(MAD) <- "MAD"
colnames(MAPE) <- "MAPE"
colnames(bias) <- "bias"
colnames(TS) <- "TS"
# #compute errors
for(t in 1:numForcPeriods){
MSE[t] <- mean(error[1:t]*error[1:t])
MAD[t] <- mean(AD[1:t])
MAPE[t] <- mean(100*abs(error[1:t]/demandTest[1:t]))
bias[t] <- sum(error[1:t])
TS[t]= bias[t]/MAD[t]
}
#combined vectors into a dataframe, also appending year and quarter information in the first two columns
error_Meas <- data.frame(floor(time(error)),cycle(error),demandTest,HWForecast$mean,error,AD,MSE,MAD,MAPE,bias,TS)
colnames(error_Meas)[1] <- "Year"
colnames(error_Meas)[2] <- "Week"
colnames(error_Meas)[3] <- "Actual Sales"
colnames(error_Meas)[4] <- "Forecast"
View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
# Cumul_MAPE_HW[,i]<-error_Meas$MAPE
# Cumul_bias_HW[,i]<-error_Meas$bias
# Cumul_TS_HW[,i]<-error_Meas$TS
# View(error_Meas)
prompt=cat("Data displayed for Store",i,"\n")
Sys.sleep(2)
}
temp<-StoreDetails[[38]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
prompt=cat("Data displayed for Store",i,"\n")
temp<-StoreDetails[[17]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
temp<-StoreDetails[[30]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
temp<-StoreDetails[[44]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
temp<-StoreDetails[[42]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
temp<-StoreDetails[[37]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
temp<-StoreDetails[[36]]
demandTS<-ts(temp$Avg_Weekly_Sales,freq=dataFreq, start =  startEntry )
plot(demandTS,main = "Average Sales faced by Walmart Store",xlab="Week",ylab="Sales")  #plot time series
View(StoreDetails)
